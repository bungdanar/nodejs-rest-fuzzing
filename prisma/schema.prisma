datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model category {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  name             String             @db.VarChar(255)
  description      String             @db.VarChar(1000)
  active           Boolean            @default(true)
  created_at       DateTime           @default(now()) @db.DateTime(0)
  updated_at       DateTime           @default(now()) @db.DateTime(0)
  product_category product_category[]
}

model coupon {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  code           String           @db.VarChar(255)
  description    String           @db.VarChar(1000)
  discount_value Decimal          @db.Decimal(5, 2)
  discount_type  String           @db.VarChar(255)
  times_used     Int              @default(0) @db.UnsignedInt
  max_usage      Int              @db.UnsignedInt
  start_date     DateTime         @db.DateTime(0)
  end_date       DateTime         @db.DateTime(0)
  created_at     DateTime         @default(now()) @db.DateTime(0)
  updated_at     DateTime         @default(now()) @db.DateTime(0)
  product_coupon product_coupon[]
}

model product {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  name             String             @db.VarChar(255)
  sku              String             @db.VarChar(255)
  regular_price    Decimal            @db.Decimal(19, 4)
  discount_price   Decimal            @db.Decimal(19, 4)
  quantity         Int                @db.UnsignedInt
  description      String             @db.VarChar(1000)
  weight           Decimal            @db.Decimal(8, 4)
  note             String             @db.VarChar(255)
  published        Boolean            @default(false)
  created_at       DateTime           @default(now()) @db.DateTime(0)
  updated_at       DateTime           @default(now()) @db.DateTime(0)
  product_category product_category[]
  product_coupon   product_coupon[]
  product_tag      product_tag[]
}

model product_category {
  product_id  Int      @db.UnsignedInt
  category_id Int      @db.UnsignedInt
  created_at  DateTime @default(now()) @db.DateTime(0)
  updated_at  DateTime @default(now()) @db.DateTime(0)
  product     product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_category_ibfk_1")
  category    category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_category_ibfk_2")

  @@id([product_id, category_id])
  @@index([category_id], map: "category_id")
}

model product_coupon {
  product_id Int      @db.UnsignedInt
  coupon_id  Int      @db.UnsignedInt
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  product    product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_coupon_ibfk_1")
  coupon     coupon   @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_coupon_ibfk_2")

  @@id([product_id, coupon_id])
  @@index([coupon_id], map: "product_coupon_ibfk_2")
}

model product_tag {
  product_id Int      @db.UnsignedInt
  tag_id     Int      @db.UnsignedInt
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  product    product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_tag_ibfk_1")
  tag        tag      @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "product_tag_ibfk_2")

  @@id([product_id, tag_id])
  @@index([tag_id], map: "product_tag_ibfk_2")
}

model tag {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.DateTime(0)
  updated_at  DateTime      @default(now()) @db.DateTime(0)
  product_tag product_tag[]
}
